require('dotenv').config({ path: '../../.env' });
const axios = require("axios");
const session = require("../../session.json");
const { faker } = require("@faker-js/faker");

async function createNft(name = undefined, amount = 1) {
  const tokenName =
    name || `${faker.word.adjective()}__${faker.word.adjective()}`;

  if (process.env.DEBUG === '1') {
    console.log('Debug, nft name output ' + tokenName);
  }

  const nft = {
    name: tokenName,
    type: "NFT",
    owner: "",
    webvalidate: "",
    external_url: "",
    description: "",
    url: "<artimage></artimage>"
  };
  await axios.get(
    `${session.MINIMA_RPC_URL}/${encodeURIComponent(`tokencreate name:${JSON.stringify(nft)} amount:${amount} decimals:0`)}`
  );
  return tokenName;
}

module.exports = createNft;
